import React, { useContext, useEffect, useState } from 'react';
import styles from "./Room.module.scss";
import { AppContext } from "../../../../App";
import { DashboardLayoutContext } from "../../../../components/Layout/Dashboard/DashboardLayout";
import { fetcher, RESPONSE } from "../../../../utils/fetcher";
import { RESPONSE_DATA } from "../../../../routes/index.routes";
import { BODY_CHANGE_PLACE_DEVICE, updateDevicePlace } from "../../../../routes/dashboard.types";
import { GET_STATS_DATA } from "../../../../types/socket.types"

const AlarmIcon = () => {
    return (
        <svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M38.9946 36.2845C39.3615 36.1516 39.6788 35.9092 39.9034 35.59C40.1279 35.2708 40.2489 34.8903 40.25 34.5V32.5834C40.2504 32.3316 40.2009 32.0823 40.1046 31.8497C40.0082 31.6172 39.8667 31.406 39.6884 31.2283L36.4167 27.9565V19.1667C36.4167 13.0008 32.2287 7.80662 26.5554 6.24454C25.9938 4.83004 24.6215 3.83337 23 3.83337C21.3785 3.83337 20.0062 4.83004 19.4446 6.24454C16.9088 6.94221 14.7238 8.40654 13.0314 10.3213L7.10508 4.39496L4.39491 7.10512L38.8949 41.6051L41.6051 38.895L38.9946 36.2845ZM23 42.1667C24.187 42.1682 25.345 41.7998 26.3129 41.1129C27.2809 40.4258 28.0108 39.4543 28.4012 38.3334H17.5988C17.9892 39.4543 18.7191 40.4258 19.6871 41.1129C20.655 41.7998 21.813 42.1682 23 42.1667ZM9.58333 19.1667V27.9565L6.31158 31.2283C6.13325 31.406 5.99182 31.6172 5.89544 31.8497C5.79906 32.0823 5.74963 32.3316 5.75 32.5834V34.5C5.75 35.0084 5.95193 35.4959 6.31137 35.8553C6.67082 36.2148 7.15833 36.4167 7.66666 36.4167H28.5181L9.71366 17.6123C9.65425 18.126 9.58333 18.6377 9.58333 19.1667Z" fill="#155E75" />
        </svg>

    )
}

const SensorIcon = () => {
    return (
        <svg width="49" height="44" viewBox="0 0 49 44" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M24.5 9.07132C20.7515 9.07132 17.6482 9.77735 15.0736 10.8337L7.56846 4.16174L4.68154 6.72815L11.4497 12.7449C6.11479 16.2878 4.21604 21.1265 4.18746 21.2028L3.97308 21.7763L4.18746 22.3499C4.23238 22.4733 8.91596 34.485 24.5 34.485C28.2465 34.485 31.3478 33.7789 33.9223 32.7226L41.4315 39.3982L44.3185 36.8317L37.5463 30.8114C42.8832 27.2685 44.784 22.4297 44.8125 22.3535L45.0269 21.7799L44.8125 21.2064C44.7676 21.083 40.084 9.07132 24.5 9.07132V9.07132ZM24.5878 12.7049H24.5C27.2074 12.7049 29.8039 13.6611 31.7184 15.363C33.6328 17.0648 34.7083 19.3731 34.7083 21.7799C34.698 23.5512 34.0922 25.2793 32.9688 26.7422L31.4968 25.4335C32.2525 24.332 32.6569 23.0684 32.6667 21.7781C32.6667 20.9178 32.4645 20.0993 32.146 19.3297C31.959 19.5268 31.7263 19.6857 31.4637 19.7953C31.2012 19.905 30.9151 19.9628 30.625 19.9649C30.0835 19.9649 29.5642 19.7737 29.1813 19.4333C28.7984 19.093 28.5833 18.6313 28.5833 18.1499C28.5833 17.3532 29.1713 16.6943 29.9758 16.4511C28.4884 15.2182 26.5336 14.5282 24.5 14.5181C22.9994 14.5181 21.6029 14.9138 20.386 15.5563L18.916 14.2495C20.5249 13.2966 22.4216 12.7049 24.5 12.7049H24.4122L24.5 12.7013L24.5878 12.7049ZM8.31775 21.7781C8.52804 21.3516 8.87717 20.7145 9.38146 19.9831L21.3599 30.6317C12.7584 29.4574 9.23446 23.6585 8.31775 21.7781V21.7781ZM27.197 30.6862L11.9254 17.11C12.6685 16.4478 13.4806 15.8498 14.3509 15.324L30.7965 29.9438C29.6284 30.3001 28.4223 30.5489 27.197 30.6862V30.6862Z" fill="#155E75" />
        </svg>
    )
}

const AlarmIconDanger = () => {
    return (
        <svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.9346 7.11087L8.23209 4.38921C1.91667 10.6625 1.91667 15.2088 1.91667 21.0834H3.83334L5.75001 20.9626C5.75001 15.3506 5.75001 12.259 10.9346 7.11087ZM37.766 4.38921L35.0673 7.11087C40.25 12.259 40.25 15.3506 40.25 21.0834L44.0833 20.9626C44.0833 15.2088 44.0833 10.6625 37.766 4.38921ZM23 42.1667C24.187 42.1682 25.345 41.7998 26.3129 41.1129C27.2809 40.4258 28.0108 39.4543 28.4012 38.3334H17.5988C17.9892 39.4543 18.7191 40.4258 19.6871 41.1129C20.655 41.7998 21.813 42.1682 23 42.1667ZM36.4167 27.9565V19.1667C36.4167 13.0008 32.2288 7.80662 26.5554 6.24454C25.9938 4.83004 24.6215 3.83337 23 3.83337C21.3785 3.83337 20.0062 4.83004 19.4446 6.24454C13.7693 7.80662 9.58334 13.0008 9.58334 19.1667V27.9565L6.31159 31.2283C6.13326 31.406 5.99183 31.6172 5.89545 31.8497C5.79907 32.0823 5.74964 32.3316 5.75001 32.5834V34.5C5.75001 35.0084 5.95194 35.4959 6.31138 35.8553C6.67083 36.2148 7.15834 36.4167 7.66667 36.4167H38.3333C38.8417 36.4167 39.3292 36.2148 39.6886 35.8553C40.0481 35.4959 40.25 35.0084 40.25 34.5V32.5834C40.2504 32.3316 40.2009 32.0823 40.1046 31.8497C40.0082 31.6172 39.8668 31.406 39.6884 31.2283L36.4167 27.9565Z" fill="#FF7777" />
        </svg>


    )
}

const SensorIconDanger = () => {
    return (
        <svg width="49" height="44" viewBox="0 0 49 44" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M48.704 20.5357C44.0906 11.5345 34.9576 5.44434 24.5 5.44434C14.0424 5.44434 4.9068 11.5387 0.296041 20.5365C0.101438 20.9215 4.57764e-05 21.3468 4.57764e-05 21.7781C4.57764e-05 22.2094 0.101438 22.6347 0.296041 23.0197C4.90936 32.0209 14.0424 38.111 24.5 38.111C34.9576 38.111 44.0932 32.0166 48.704 23.0188C48.8986 22.6339 49 22.2086 49 21.7772C49 21.3459 48.8986 20.9206 48.704 20.5357ZM24.5 34.0277C22.0772 34.0277 19.7088 33.3092 17.6943 31.9632C15.6798 30.6171 14.1096 28.7039 13.1825 26.4655C12.2553 24.2271 12.0127 21.7641 12.4854 19.3878C12.958 17.0115 14.1247 14.8288 15.8379 13.1156C17.5511 11.4024 19.7339 10.2357 22.1101 9.76305C24.4864 9.29038 26.9495 9.53297 29.1879 10.4601C31.4263 11.3873 33.3395 12.9574 34.6855 14.9719C36.0315 16.9864 36.75 19.3548 36.75 21.7777C36.7508 23.3866 36.4345 24.9799 35.8191 26.4665C35.2038 27.9531 34.3015 29.3038 33.1638 30.4415C32.0261 31.5791 30.6754 32.4814 29.1888 33.0968C27.7022 33.7121 26.1089 34.0285 24.5 34.0277ZM24.5 13.611C23.7711 13.6212 23.0468 13.7296 22.3469 13.9334C22.9238 14.7175 23.2007 15.6823 23.1273 16.653C23.0539 17.6237 22.635 18.536 21.9466 19.2243C21.2583 19.9127 20.3461 20.3315 19.3754 20.405C18.4047 20.4784 17.4398 20.2015 16.6557 19.6246C16.2093 21.2695 16.2899 23.0129 16.8862 24.6096C17.4825 26.2063 18.5645 27.5758 19.9799 28.5253C21.3953 29.4749 23.0729 29.9566 24.7764 29.9028C26.48 29.849 28.1238 29.2623 29.4765 28.2253C30.8291 27.1884 31.8225 25.7533 32.3169 24.1222C32.8112 22.491 32.7816 20.7459 32.2322 19.1325C31.6828 17.5191 30.6413 16.1185 29.2542 15.1281C27.8672 14.1376 26.2044 13.607 24.5 13.611Z" fill="#FF7777" />
        </svg>

    )
}

const DogIconDanger = () => {
    return (
        <svg width="155" height="146" viewBox="0 0 155 146" fill="none" xmlns="http://www.w3.org/2000/svg">
            <mask id="mask0_52_1205" maskUnits="userSpaceOnUse" x="3" y="67" width="152" height="79">
                <path d="M7.03394 74.0535C7.12359 73.3359 9.28307 72.0945 9.90006 71.7594C12.8403 70.1624 15.3331 68.1902 18.7691 67.6173C22.3764 67.0158 26.4306 67.406 30.0584 67.5217C34.316 67.6575 38.6889 67.6911 42.8604 68.6687C48.5964 70.013 54.4038 71.4068 59.9298 73.464C64.4006 75.1284 68.8091 76.9287 73.2732 78.6576C77.7532 80.3927 82.0097 82.5305 86.5528 84.1539C94.07 86.84 101.961 88.0422 109.928 88.3278C122.219 88.7686 135.914 89.4198 147.092 83.5485C148.843 82.6283 150.757 81.351 152.188 79.7463L154.066 76.6343C153.685 77.7777 153.017 78.8169 152.188 79.7463L113.181 144.4H59.9298L18.7691 145.92L3.03839 98.7999L7.03394 74.0535Z" fill="#D9D9D9" />
            </mask>
            <g mask="url(#mask0_52_1205)">
                <path d="M79.8787 49.2754L85.5109 15.4661C85.9741 12.6872 88.3879 10.6396 91.2161 10.6396C93.0448 10.6396 94.7515 11.4928 95.8486 12.9554L99.9691 18.4399H112.672C115.768 18.4399 118.743 19.6831 120.937 21.8769L125.326 26.2402H138.98C142.222 26.2402 144.831 28.8484 144.831 32.0904V37.9406C144.831 48.7147 136.103 57.4413 125.326 57.4413H117.524H113.623H108.43L107.186 64.8759L79.8787 49.2754ZM105.821 73.0662V127.644C105.821 131.958 102.334 135.444 98.0186 135.444H90.2165C85.901 135.444 82.4144 131.958 82.4144 127.644V99.5627C76.5628 102.561 69.9311 104.243 62.9092 104.243C55.8873 104.243 49.2555 102.561 43.4039 99.5627V127.644C43.4039 131.958 39.9174 135.444 35.6019 135.444H27.7998C23.4842 135.444 19.9977 131.958 19.9977 127.644V71.5305C12.9758 68.8735 7.46555 62.9258 5.56379 55.3206L4.63729 51.5423C3.58889 47.3741 6.12457 43.1327 10.3182 42.0845C14.5118 41.0363 18.7298 43.5714 19.7782 47.7641L20.7291 51.5423C21.5825 55.0037 24.7033 57.4413 28.2874 57.4413H35.6019H39.5029H78.4646L105.821 73.0662ZM117.524 30.1403C117.524 27.9953 115.768 26.2402 113.623 26.2402C111.477 26.2402 109.722 27.9953 109.722 30.1403C109.722 32.2854 111.477 34.0405 113.623 34.0405C115.768 34.0405 117.524 32.2854 117.524 30.1403Z" fill="#FFB4B4" />
            </g>
            <mask id="mask1_52_1205" maskUnits="userSpaceOnUse" x="0" y="0" width="155" height="89">
                <path d="M9.90009 71.8558C9.2831 72.1909 7.12362 73.4323 7.03397 74.1499L0 35.2133L49.6274 32.9333L89.6332 0L154.066 14.1867V76.7307C153.027 79.848 149.858 82.1917 147.092 83.6449C135.914 89.5162 122.219 88.865 109.928 88.4242C101.961 88.1385 94.07 86.9363 86.5529 84.2503C82.0097 82.6268 77.7532 80.4891 73.2732 78.754C68.8092 77.0251 64.4006 75.2248 59.9298 73.5604C54.4038 71.5032 48.5964 70.1094 42.8605 68.7651C38.689 67.7875 34.316 67.7539 30.0585 67.6181C26.4307 67.5024 22.3764 67.1121 18.7691 67.7137C15.3332 68.2866 12.8404 70.2588 9.90009 71.8558Z" fill="#D9D9D9" />
            </mask>
            <g mask="url(#mask1_52_1205)">
                <path d="M79.8787 49.2754L85.5109 15.4661C85.9741 12.6872 88.3879 10.6396 91.2162 10.6396C93.0448 10.6396 94.7515 11.4928 95.8487 12.9554L99.9691 18.4399H112.672C115.768 18.4399 118.743 19.6831 120.937 21.8769L125.326 26.2402H138.98C142.222 26.2402 144.831 28.8484 144.831 32.0904V37.9406C144.831 48.7147 136.103 57.4413 125.326 57.4413H117.524H113.623H108.43L107.186 64.8759L79.8787 49.2754ZM105.821 73.0662V127.644C105.821 131.958 102.334 135.444 98.0186 135.444H90.2165C85.901 135.444 82.4144 131.958 82.4144 127.644V99.5627C76.5629 102.561 69.9311 104.243 62.9092 104.243C55.8873 104.243 49.2555 102.561 43.404 99.5627V127.644C43.404 131.958 39.9174 135.444 35.6019 135.444H27.7998C23.4842 135.444 19.9977 131.958 19.9977 127.644V71.5305C12.9758 68.8735 7.46557 62.9258 5.56381 55.3206L4.63731 51.5423C3.58891 47.3741 6.12459 43.1327 10.3182 42.0845C14.5118 41.0363 18.7298 43.5714 19.7783 47.7641L20.7291 51.5423C21.5825 55.0037 24.7033 57.4413 28.2874 57.4413H35.6019H39.5029H78.4646L105.821 73.0662ZM117.524 30.1403C117.524 27.9953 115.768 26.2402 113.623 26.2402C111.477 26.2402 109.722 27.9953 109.722 30.1403C109.722 32.2854 111.477 34.0405 113.623 34.0405C115.768 34.0405 117.524 32.2854 117.524 30.1403Z" fill="#FFB4B4" />
            </g>
        </svg>


    )
}

const DogIcon = () => {
    return (
        <svg width="155" height="146" viewBox="0 0 155 146" fill="none" xmlns="http://www.w3.org/2000/svg">
            <mask id="mask0_52_1163" maskUnits="userSpaceOnUse" x="3" y="67" width="152" height="79">
                <path d="M7.03752 74.0527C7.12721 73.3351 9.2878 72.0937 9.9051 71.7586C12.8469 70.1616 15.3409 68.1895 18.7787 67.6165C22.3877 67.015 26.4441 67.4053 30.0737 67.521C34.3335 67.6567 38.7086 67.6904 42.8823 68.668C48.6211 70.0122 54.4315 71.406 59.9603 73.4632C64.4333 75.1276 68.8442 76.9278 73.3105 78.6567C77.7928 80.3918 82.0515 82.5295 86.5969 84.1529C94.1179 86.839 102.013 88.0412 109.984 88.3268C122.281 88.7676 135.983 89.4188 147.167 83.5475C148.919 82.6274 150.834 81.3501 152.266 79.7455L154.144 76.6335C153.763 77.7768 153.095 78.8161 152.266 79.7455L113.239 144.398H59.9603L18.7787 145.918L3.03993 98.7988L7.03752 74.0527Z" fill="#D9D9D9" />
            </mask>
            <g mask="url(#mask0_52_1163)">
                <path d="M79.9194 49.275L85.5544 15.4661C86.0179 12.6873 88.4329 10.6398 91.2626 10.6398C93.0921 10.6398 94.7997 11.4929 95.8975 12.9554L100.02 18.4399H112.729C115.827 18.4399 118.803 19.6831 120.999 21.8769L125.39 26.2401H139.05C142.295 26.2401 144.905 28.8483 144.905 32.0902V37.9404C144.905 48.7144 136.172 57.4408 125.39 57.4408H117.584H113.681H108.485L107.241 64.8753L79.9194 49.275ZM105.875 73.0655V127.642C105.875 131.957 102.386 135.443 98.0685 135.443H90.2624C85.9447 135.443 82.4564 131.957 82.4564 127.642V99.5617C76.6018 102.56 69.9667 104.242 62.9412 104.242C55.9157 104.242 49.2806 102.56 43.426 99.5617V127.642C43.426 131.957 39.9377 135.443 35.62 135.443H27.8139C23.4962 135.443 20.0078 131.957 20.0078 127.642V71.5299C12.9824 68.8729 7.46935 62.9253 5.56662 55.3201L4.63965 51.5419C3.59071 47.3737 6.12768 43.1324 10.3234 42.0842C14.5192 41.0361 18.7394 43.5711 19.7883 47.7637L20.7397 51.5419C21.5935 55.0032 24.7159 57.4408 28.3018 57.4408H35.62H39.523H78.5046L105.875 73.0655ZM117.584 30.1402C117.584 27.9952 115.827 26.2401 113.681 26.2401C111.534 26.2401 109.778 27.9952 109.778 30.1402C109.778 32.2852 111.534 34.0403 113.681 34.0403C115.827 34.0403 117.584 32.2852 117.584 30.1402Z" fill="#0891B2" />
            </g>
            <mask id="mask1_52_1163" maskUnits="userSpaceOnUse" x="0" y="0" width="155" height="89">
                <path d="M9.90513 71.8549C9.28783 72.19 7.12724 73.4314 7.03755 74.1489L0 35.2129L49.6527 32.9329L89.6789 0L154.144 14.1865V76.7298C153.105 79.847 149.934 82.1907 147.167 83.6438C135.983 89.515 122.281 88.8639 109.984 88.4231C102.013 88.1374 94.1179 86.9352 86.5969 84.2492C82.0515 82.6258 77.7928 80.4881 73.3105 78.753C68.8442 77.0241 64.4334 75.2239 59.9603 73.5595C54.4315 71.5023 48.6211 70.1085 42.8823 68.7643C38.7087 67.7866 34.3335 67.753 30.0738 67.6172C26.4441 67.5015 22.3878 67.1113 18.7787 67.7128C15.341 68.2858 12.8469 70.2579 9.90513 71.8549Z" fill="#D9D9D9" />
            </mask>
            <g mask="url(#mask1_52_1163)">
                <path d="M79.9194 49.275L85.5544 15.4661C86.0179 12.6873 88.4329 10.6398 91.2626 10.6398C93.0922 10.6398 94.7997 11.4929 95.8975 12.9554L100.02 18.4399H112.729C115.827 18.4399 118.803 19.6831 120.999 21.8769L125.39 26.2401H139.05C142.295 26.2401 144.905 28.8483 144.905 32.0902V37.9404C144.905 48.7144 136.172 57.4408 125.39 57.4408H117.584H113.681H108.485L107.241 64.8753L79.9194 49.275ZM105.875 73.0655V127.642C105.875 131.957 102.386 135.443 98.0685 135.443H90.2625C85.9447 135.443 82.4564 131.957 82.4564 127.642V99.5617C76.6019 102.56 69.9667 104.242 62.9412 104.242C55.9158 104.242 49.2806 102.56 43.4261 99.5617V127.642C43.4261 131.957 39.9377 135.443 35.62 135.443H27.8139C23.4962 135.443 20.0079 131.957 20.0079 127.642V71.5299C12.9824 68.8729 7.46937 62.9253 5.56665 55.3201L4.63968 51.5419C3.59074 47.3737 6.12771 43.1324 10.3235 42.0842C14.5192 41.0361 18.7394 43.5711 19.7883 47.7637L20.7397 51.5419C21.5935 55.0032 24.7159 57.4408 28.3018 57.4408H35.62H39.523H78.5046L105.875 73.0655ZM117.584 30.1402C117.584 27.9952 115.827 26.2401 113.681 26.2401C111.534 26.2401 109.778 27.9952 109.778 30.1402C109.778 32.2852 111.534 34.0403 113.681 34.0403C115.827 34.0403 117.584 32.2852 117.584 30.1402Z" fill="#C2E5FA" />
            </g>
        </svg>

    )
}

export const RoomModal: React.FunctionComponent = (): JSX.Element => {

    const { selectedDevice, setMessages } = useContext(AppContext);
    const { socket } = useContext(DashboardLayoutContext);
    const [devicePlace, setDevicePlace] = useState<string>("");
    const [statDays, setStatDays] = useState<number>(0);

    useEffect(() => {
        if (!selectedDevice) return;
        if (!selectedDevice.place) return;

        setDevicePlace(selectedDevice.place);
    }, [selectedDevice]);

    const getLastDay = (data: GET_STATS_DATA): number => {
        if (data.lastSignal === null) return 0;

        const currDate: Date = new Date();

        let difference = currDate.getTime() - data.lastSignal.created_at.getTime();
        let TotalDays = Math.ceil(difference / (1000 * 3600 * 24));
        return TotalDays;
    }

    const getStats = () => {
        if (!socket) return;
        if (!socket.current) return;
        if (!selectedDevice) return;

        socket.current.emit("get stats", selectedDevice.key);

        socket.current.on("get stats", (resData) => {
            if (resData.readMsg) {
                if (!setMessages) return;
                setMessages(prev => [
                    ...prev, {
                        type: resData.typeMsg,
                        msg: resData.message,
                        index: new Date().getTime() + prev.length
                    }
                ])
                return;
            };

            const data: GET_STATS_DATA = resData.data;
            setStatDays(getLastDay(data))
        });
    }

    useEffect(() => {
        getStats();
        // eslint-disable-next-line
    }, [socket, socket?.current]);

    if (!selectedDevice) return (
        <div>

        </div>
    );

    const changeName = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        const doFetch = async () => {
            try {
                const body: BODY_CHANGE_PLACE_DEVICE = {
                    key: selectedDevice.key,
                    newPlace: devicePlace
                }

                const resData: RESPONSE = await fetcher[updateDevicePlace.method]({ uri: updateDevicePlace.url, body })
                const data: RESPONSE_DATA = resData.data;

                if (data.readMsg) {
                    if (!setMessages) return;
                    setMessages(prev => [
                        ...prev, {
                            type: data.typeMsg,
                            msg: data.message,
                            index: new Date().getTime() + prev.length
                        }
                    ])
                }

                // Refetch
                if (!socket) return;
                if (!socket.current) return;

                socket.current.emit("get devices");
                socket.current.emit("get status");
            } catch (error) {
                console.error(error);
                if (!setMessages) return;
                setMessages(prev => [
                    ...prev, {
                        type: "danger",
                        msg: "Error al cambiar de lugar el dispositivo.",
                        index: new Date().getTime() + prev.length
                    }
                ])
            }
        }
        void doFetch();
    }

    return (
        <div className={styles.room}>
            <div className={`${styles.room_block} ${selectedDevice.state && styles.room_block_bad}`}></div>
            <div className={`${styles.room_title} ${selectedDevice.state && styles.room_title_bad}`}>
                <form onSubmit={changeName}>
                    <input type="text" value={devicePlace} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setDevicePlace(e.target.value);
                    }} />
                </form>
            </div>
            <div className={styles.room_state_des}>
                {!selectedDevice.state && "Todo tranquilo por aquí"}
                {selectedDevice.state && "Tu mascota está de traviesa"}
            </div>
            <div className={styles.room_alarms}>
                <div>
                    Estado de la alarma {selectedDevice.state && <AlarmIconDanger />} {!selectedDevice.state && <AlarmIcon />}
                </div>
                <div>
                    Estado del sensor {selectedDevice.state && <SensorIconDanger />} {!selectedDevice.state && <SensorIcon />}
                </div>
            </div>
            <div className={styles.room_dog}>
                Tu mascota se está portando bien por:
            </div>
            <div className={styles.room_stats}>
                <div className={styles.room_stats_left}>
                    <div className={`${styles.room_stats_left_days} ${selectedDevice.state && styles.room_stats_left_days_bad}`}>
                        {statDays}
                    </div>
                    <div className={styles.room_stats_left_stat}>
                        días consecutivos
                    </div>
                </div>
                <div className={styles.room_stats_right}>
                    <div className={styles.room_stats_right_icon}>

                        {selectedDevice.state && <DogIconDanger />}
                        {!selectedDevice.state && <DogIcon />}
                    </div>
                    <div className={`${styles.room_stats_right_stat} ${selectedDevice.state && styles.room_stats_right_stat_bad}`}>
                        0%
                    </div>
                </div>
            </div>
        </div>
    );
};

export default RoomModal;
